Command	Result
{ state unsafe }	{ Insert "unsafe ".  }
{ unsafe block }	{ Inserts an unsafe block and positions the cursor appropriately.  }
{ state (struct | structure) $<$user.text$>$ }	{ Insert "struct ". Insert "$<$text$>$ (formatted with PUBLIC\_CAMEL\_CASE)".  }
{ state enum $<$user.text$>$ }	{ Insert "enum ". Insert "$<$text$>$ (formatted with PUBLIC\_CAMEL\_CASE)".  }
{ toggle use }	{ GUI: List libraries for active language.  }
{ borrow }	{ Insert "\&".  }
{ borrow mutable }	{ Insert "\&mut ".  }
{ state (a sink | async | asynchronous) }	{ Insert "async ".  }
{ state (pub | public) }	{ Insert "pub ".  }
{ state (pub | public) crate }	{ Insert "pub(crate) ".  }
{ state (dyn | dynamic) }	{ Insert "dyn ".  }
{ state constant }	{ Insert "const ".  }
{ state (funk | func | function) }	{ Insert "fn ".  }
{ state (imp | implements) }	{ Insert "impl ".  }
{ state let mute }	{ Insert "let mut ".  }
{ state let }	{ Insert "let ".  }
{ state (mute | mutable) }	{ Insert "mut ".  }
{ state (mod | module) }	{ Insert "mod ".  }
{ state ref (mute | mutable) }	{ Insert "ref mut ".  }
{ state ref }	{ Insert "ref ".  }
{ state trait }	{ Insert "trait ".  }
{ state match }	{ Inserts switch statement.  }
{ state (some | sum) }	{ Insert "Some".  }
{ state static }	{ Insert "static ".  }
{ self taught }	{ Insert "self.".  }
{ state use }	{ import/using equivalent.  }
{ use $<$user.code{-}libraries$>$ }	{ Inserts a library and positions the cursor appropriately. Press ; enter.  }
{ state if let some }	{ Inserts if let some block, positioning the cursor appropriately.  }
{ state if let (ok | okay) }	{ user.code\_insert\_if\_let\_okay() }
{ state if let error }	{ Inserts if let error block, positioning the cursor appropriately.  }
{ is some }	{ Inserts check for non{-}null.  }
{ implement (struct | structure) }	{ Inserts implements block, positioning the cursor appropriately.  }
{ is implemented trait \{user.code{-}trait\} }	{ Inserts type annotation for implementor of trait.  }
{ is implemented trait }	{ Insert ": impl ".  }
{ returns implemented trait \{user.code{-}trait\} }	{ Inserts a return type for implementor of trait.  }
{ returns implemented trait }	{ Insert " {-}$>$ impl ".  }
{ trait \{user.code{-}trait\} }	{ Insert "$<$code\_trait$>$".  }
{ implemented trait \{user.code{-}trait\} }	{ Insert "impl  $<$code\_trait$>$".  }
{ dynamic trait \{user.code{-}trait\} }	{ Insert "dyn  $<$code\_trait$>$".  }
{ macro \{user.code{-}macros\} }	{ Inserts a macro and positions the cursor appropriately.  }
{ macro wrap \{user.code{-}macros\} }	{ Inserts a macro and positions the cursor appropriately.  }
{ block dock comment }	{ Inserts a block document comment and positions the cursor appropriately.  }
{ inner dock comment }	{ Inserts an inner document comment and positions the cursor appropriately.  }
{ inner block dock comment }	{ Inserts an inner block document comment and positions the cursor appropriately.  }
