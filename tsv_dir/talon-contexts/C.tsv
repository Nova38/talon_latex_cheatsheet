Command	Result
{ state include }	{ Insert "\#include ".  }
{ state include system }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ state include local }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ state type deaf }	{ Insert "typedef ".  }
{ state type deaf struct }	{ Insert "typedef struct". Insert "\{\textbackslashn\textbackslashn\}". Move cursor up one row. Press tab.  }
{ state define }	{ Insert "\#define ".  }
{ state (undefine | undeaf) }	{ Insert "\#undef ".  }
{ state if (define | deaf) }	{ Insert "\#ifdef ".  }
{ {[}state{]} define $<$user.text$>$ }	{ Insert "\#define  $<$text$>$ (formatted with ALL\_CAPS,SNAKE\_CASE)".  }
{ {[}state{]} (undefine | undeaf) $<$user.text$>$ }	{ Insert "\#undef  $<$text$>$ (formatted with ALL\_CAPS,SNAKE\_CASE)".  }
{ {[}state{]} if (define | deaf) $<$user.text$>$ }	{ Insert "\#ifdef  $<$text$>$ (formatted with ALL\_CAPS,SNAKE\_CASE)".  }
{ state pre if }	{ Insert "\#if ".  }
{ state error }	{ Insert "\#error ".  }
{ state pre else if }	{ Insert "\#elif ".  }
{ state pre end }	{ Insert "\#endif ".  }
{ state pragma }	{ Insert "\#pragma ".  }
{ state default }	{ Insert "default:\textbackslashnbreak;".  }
{ push brackets }	{ Move cursor to end of line. Insert "\{\}". Move cursor left one column. Press enter. Press enter. Move cursor up one row.  }
{ $<$user.c{-}variable$>$ $<$phrase$>$ }	{ Insert "$<$c\_variable$>$  ". Insert "$<$phrase$>$ (formatted with PRIVATE\_CAMEL\_CASE,NO\_SPACES)".  }
{ $<$user.c{-}variable$>$ $<$user.letter$>$ }	{ Insert "$<$c\_variable$>$   $<$letter$>$  ".  }
{ cast to $<$user.c{-}cast$>$ }	{ Insert "$<$c\_cast$>$".  }
{ standard cast to $<$user.stdint{-}cast$>$ }	{ Insert "$<$stdint\_cast$>$".  }
{ $<$user.c{-}types$>$ }	{ Insert "$<$c\_types$>$".  }
{ $<$user.c{-}pointers$>$ }	{ Insert "$<$c\_pointers$>$".  }
{ $<$user.c{-}keywords$>$ }	{ Insert "$<$c\_keywords$>$".  }
{ $<$user.c{-}signed$>$ }	{ Insert "$<$c\_signed$>$".  }
{ standard $<$user.stdint{-}types$>$ }	{ Insert "$<$stdint\_types$>$".  }
{ int main }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ toggle includes }	{ GUI: List libraries for active language.  }
{ include $<$user.code{-}libraries$>$ }	{ Inserts a library and positions the cursor appropriately. Press end enter.  }
