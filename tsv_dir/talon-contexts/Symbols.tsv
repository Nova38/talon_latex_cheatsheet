Command	Result
{ double dash }	{ Insert "{-}{-}".  }
{ triple quote }	{ Insert "'''".  }
{ (triple grave | triple back tick | gravy) }	{ Insert "```".  }
{ (dot dot | dotdot) }	{ Insert "..".  }
{ ellipses }	{ Insert "...".  }
{ (comma and | spamma) }	{ Insert ", ".  }
{ arrow }	{ Insert "{-}$>$".  }
{ dub arrow }	{ Insert "=$>$".  }
{ new line }	{ Insert "\textbackslashn".  }
{ carriage return }	{ Insert "\textbackslashr".  }
{ line feed }	{ Insert "\textbackslashr\textbackslashn".  }
{ empty dubstring }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ empty escaped (dubstring | dub quotes) }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ empty string }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ empty escaped string }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ (inside parens | args) }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ inside (squares | square brackets | list) }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ inside (bracket | braces) }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ inside percent }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ inside (quotes | string) }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ inside (double quotes | dubquotes) }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ inside (graves | back ticks) }	{ Insert `before + after`, leaving cursor between `before` and `after`. Not entirely reliable if `after` contains newlines..  }
{ angle that }	{ Let $<$text$>$ be the selected text. Pastes text and preserves clipboard.  }
{ (square | square bracket) that }	{ Let $<$text$>$ be the selected text. Pastes text and preserves clipboard.  }
{ (bracket | brace) that }	{ Let $<$text$>$ be the selected text. Pastes text and preserves clipboard.  }
{ (parens | args) that }	{ Let $<$text$>$ be the selected text. Pastes text and preserves clipboard.  }
{ percent that }	{ Let $<$text$>$ be the selected text. Pastes text and preserves clipboard.  }
{ quote that }	{ Let $<$text$>$ be the selected text. Pastes text and preserves clipboard.  }
{ (double quote | dubquote) that }	{ Let $<$text$>$ be the selected text. Pastes text and preserves clipboard.  }
{ (grave | back tick) that }	{ Let $<$text$>$ be the selected text. Pastes text and preserves clipboard.  }
